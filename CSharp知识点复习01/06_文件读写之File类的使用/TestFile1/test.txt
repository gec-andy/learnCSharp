随机事件与角色的互动
{
	实现方式{
		1.给事件点添加碰撞器,使用触发碰撞器
		2.给角色增加“Avatar”标签,并增加碰撞器
		3.判断所触发的物体的标签是否是“Avatar”
		4.满足条件以后{
			主角可以拾取食物,
			主角可以收集精灵球
		}
	}
}
AR模块功能制作流程{
	读取数据{
		主角捕捉到的宠物数据
	}
	配置精灵球{
		设置精灵球数量
	}
	配置小精灵{
	
	}
	可以发射精灵球
	触发小精灵捕捉成功{
		精灵球击中宠物
	}
}
模型预制体需要注意(需要和美术人员进行交流沟通){
	1.模型的坐标轴位置以及旋转角度
	2.模型的朝向
	3.导出前的操作
}
数据的全局管理
{
	编写一静态类,用来存储全局数据
	全局数据的使用场景{
		涉及不同场景对同一数据的更改或者使用。
		同一个数据会被大量的修改或者调用。
		扩展点{
			在非AR场景中的游戏道具如果想要保存,则也可以考虑使用静态数据来进行保存,方便其他场景进行使用。
		}
	}
	扩展点{
		可以将数据持久化存储到数据库或者数据文件中,下次进行游戏的时候可以直接读上次已经存储好了的数据
	}
}
捕捉宠物成功后,{
	小精灵播放被捕捉到的动画
	小精灵消失
	显示捕捉成功界面{
		这个界面可以将UI设计的更有带入感比较好
	}
}
捕捉小精灵为其命名{
	1.给小精灵起名的用处是什么？
	2.怎么保存起好的名字？
	3.怎么传递这个名字？
}
制作宠物精灵仓库,存储捕捉到的宠物{
		宠物模型
		宠物属性信息
		扩展点 可以通过一些方式进行仓库的扩展
}
AR项目实战(待完善部分)[done]{
	1.地图场景{
		可以随时跳转到精灵仓库
		碰到精灵时可跳转AR场景
	}
	2.AR场景{
		随时跳转到精灵仓库
		捕捉成功跳转到精灵仓库
		随时跳转到地图场景
		放弃捕捉跳转到地图场景
		ex{
			1.调整AR场景中预制点的位置
			2.可以固定视角到精灵球的前方
			3.可以使用实地识别技术,直接映射到地表上,而不是悬浮在空中
		}
	}
	3.仓库场景{
		随时跳转到地图场景
	}
	4.角色移动显得比较慢,需要调整
	5.捕捉小精灵后,需要让小精灵面对玩家
}
三种场景的应用范围{
	ps:可以再进行扩展一些宠物小精灵相关的玩法,使游戏更完善化。
	实景地图{
		根据玩家所处现实生活中的地点,来进行随机生成宠物的事件
	}
	AR捕捉宠物场景{
		根据玩家所在现实世界捕捉到的宠物,进行抓捕
	}
	宠物存储场景{
		保存玩家已经持有的宠物
	}
}
该项目覆盖的知识点较多,需要基础知识也比较多,概念比较杂,需要深刻理解之后在基础之上进行扩展。
地图经纬度与Unity的坐标转换
